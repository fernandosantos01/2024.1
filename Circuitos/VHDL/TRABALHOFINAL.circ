<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="3.8.0" version="1.0">
  This file is intended to be loaded by Logisim-evolution v3.8.0(https://github.com/logisim-evolution/).

  <lib desc="#Wiring" name="0">
    <tool name="Pin">
      <a name="appearance" val="classic"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Plexers" name="2"/>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4"/>
  <lib desc="#I/O" name="5"/>
  <lib desc="#TTL" name="6"/>
  <lib desc="#TCL" name="7"/>
  <lib desc="#Base" name="8"/>
  <lib desc="#BFH-Praktika" name="9"/>
  <lib desc="#Input/Output-Extra" name="10"/>
  <lib desc="#Soc" name="11"/>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Poke Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Wiring Tool"/>
    <tool lib="8" name="Text Tool"/>
    <sep/>
    <tool lib="0" name="Pin"/>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop"/>
    <tool lib="4" name="Register"/>
  </toolbar>
  <circuit name="main">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="main"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="simulationFrequency" val="2.0"/>
    <comp lib="0" loc="(410,330)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="width" val="3"/>
    </comp>
    <comp lib="0" loc="(430,200)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="width" val="4"/>
    </comp>
    <comp lib="0" loc="(430,250)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="width" val="4"/>
    </comp>
    <comp lib="0" loc="(800,290)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="width" val="4"/>
    </comp>
    <comp loc="(580,400)" name="ULA_Testbench">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="AA"/>
    </comp>
    <comp loc="(800,290)" name="ULA">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="OOOO"/>
    </comp>
    <wire from="(410,330)" to="(580,330)"/>
    <wire from="(430,200)" to="(560,200)"/>
    <wire from="(430,250)" to="(490,250)"/>
    <wire from="(490,250)" to="(490,310)"/>
    <wire from="(490,310)" to="(580,310)"/>
    <wire from="(560,200)" to="(560,290)"/>
    <wire from="(560,290)" to="(580,290)"/>
  </circuit>
  <vhdl name="ULA">library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity ULA is
    Port (
        A, B: in std_logic_vector(3 downto 0); -- Operandos de 4 bits
        opcode: in std_logic_vector(2 downto 0); -- Código de operação de 3 bits
        result: out std_logic_vector(3 downto 0) -- Resultado de 4 bits
    );
end ULA;

architecture Behavioral of ULA is
begin

    process(A, B, opcode)
    begin
        case opcode is
            when "000" =&gt; -- Soma
                result &lt;= std_logic_vector(unsigned(A) + unsigned(B));
            when "001" =&gt; -- Subtração
                result &lt;= std_logic_vector(unsigned(A) - unsigned(B));
            when "010" =&gt; -- AND
                result &lt;= A and B;
            when "011" =&gt; -- OR
                result &lt;= A or B;
            when "100" =&gt; -- NOT
                result &lt;= not A;
            when "101" =&gt; -- Deslocamento à esquerda
                result &lt;= A(2 downto 0) &amp; '0';
            when "110" =&gt; -- Deslocamento à direita
                result &lt;= '0' &amp; A(3 downto 1);
            when others =&gt;
                result &lt;= (others =&gt; 'X'); -- Código de operação inválido
        end case;
    end process;

end Behavioral;
</vhdl>
  <vhdl name="ULA_Testbench">library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity ULA_Testbench is
end ULA_Testbench;

architecture Behavioral of ULA_Testbench is

    component ULA
        Port (
            A, B: in std_logic_vector(3 downto 0);
            opcode: in std_logic_vector(2 downto 0);
            result: out std_logic_vector(3 downto 0)
        );
    end component;

    signal A, B, opcode: std_logic_vector(3 downto 0);
    signal result: std_logic_vector(3 downto 0);

begin

    ULA_inst: ULA port map (A, B, opcode, result);

    stimulus_process: process
    begin
        A &lt;= "0000"; B &lt;= "0000"; opcode &lt;= "000"; -- Soma (0 + 0)
        wait for 10 ns;
        
        A &lt;= "0001"; B &lt;= "0010"; opcode &lt;= "001"; -- Subtração (1 - 2)
        wait for 10 ns;
        
        -- Adicione mais casos de teste conforme necessário
        
        wait;
    end process stimulus_process;

end Behavioral;
</vhdl>
</project>
